using OOP_Day4;

namespace OOP_Day4
{
    #region 과제 1. string의 불변성
    /*
     * 가변성을 가진 string을 사용한다. ==> 반복적인 힙 메모리 할당 방지
     * ==> stringbuilder, char로 이루어진 가변 배열
     * 
     * 만약, 특정 문자열을 자주 사용해야되는 경우, 또는 비교해야하는 경우에는
     * 문자열 인터닝이라는 기법이 있다.
     * 특정 문자열에 대해, 동일한 문자열을 만들때 인터닝을 하여 사용하면, 동일한 문자열이 메모리에 중복 할당되는 것이 아닌, 같은 주소를 참조하도록 만든다.
     * ==> 비교를 하는 경우에도 참조하는 주소값을 비교하므로 속도가 빨라진다.
     * 
     */
    #endregion

    #region 심화 과제 1. StringBuilder 클래스
    /*
     * string이 자주 변하면 생길 문제
     * 1. string이 바뀔 때마다 새로운 메모리에 할당되고, 이전 string이 여전히 남아있기 때문에, 불필요한 메모리를 사용하게 된다.
     * 2. 불필요한 string이 많이 생성되며 GC에서 작업을 수행하는 빈도가 많아져 성능을 저하시킨다.
     * 3. 새로운 객체를 생성하는 작업을 수행도 성능을 저하시킨다.
     * 
     * stringbuilder의 장점
     * 1. 새로운 할당을 하지않고 기존 할당된 메모리에서 수정작업이 일어나서 성능적으로 유리하다.
     * 2. 새로운 할당을 하지않으므로 메모리 사용을 줄일 수 있다.
     * 
     * 언제 사용하면 좋을까?
     * 1. 게임의 점수가 플레이 도중 자주 바뀌는 경우
     * 2. 대화창이 있고, 대화가 진행되며 대화 문자열이 자주 바뀌는 상황
     */
    #endregion

    #region 심화 과제 2. record
    /*
     * 사용자가 정의할 수 있는 타입을 만들수 있는 방법으로 struct와 class와 비슷하다.
     * class와 크게 다른 점은, 각 변수들이 전부 불변으로 이루어져 있기에,
     * 비교를 하는 경우에는 참조하는 오브젝트가 같은지를 비교하는 것이 아닌, 해당 값을 직접 비교한다.
     */
    #endregion
}
